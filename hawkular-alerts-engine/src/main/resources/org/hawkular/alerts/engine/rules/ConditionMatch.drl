/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.hawkular.alerts.engine.rules

import org.hawkular.alerts.api.model.condition.Alert;
import org.hawkular.alerts.api.model.condition.AvailabilityCondition;
import org.hawkular.alerts.api.model.condition.AvailabilityConditionEval;
import org.hawkular.alerts.api.model.condition.ConditionEval;
import org.hawkular.alerts.api.model.condition.CompareCondition;
import org.hawkular.alerts.api.model.condition.CompareConditionEval;
import org.hawkular.alerts.api.model.condition.StringCondition;
import org.hawkular.alerts.api.model.condition.StringConditionEval;
import org.hawkular.alerts.api.model.condition.ThresholdCondition;
import org.hawkular.alerts.api.model.condition.ThresholdConditionEval;
import org.hawkular.alerts.api.model.condition.ThresholdRangeCondition;
import org.hawkular.alerts.api.model.condition.ThresholdRangeConditionEval;
import org.hawkular.alerts.api.model.dampening.Dampening;
import org.hawkular.alerts.api.model.data.Availability;
import org.hawkular.alerts.api.model.data.Availability.AvailabilityType
import org.hawkular.alerts.api.model.data.NumericData;
import org.hawkular.alerts.api.model.data.StringData;
import org.hawkular.alerts.api.model.notification.Notification;
import org.hawkular.alerts.api.model.trigger.Trigger;
import org.hawkular.alerts.api.model.trigger.Trigger.Mode;
import org.hawkular.alerts.api.model.trigger.TriggerTemplate.Match;
import org.hawkular.alerts.api.services.NotificationsService;

import org.jboss.logging.Logger;

import java.util.HashSet;
import java.util.List;

global Logger log;
global NotificationsService notifications;
global List alerts;

////// CONDITION MATCHING
//
// To perform dampening it is important not only to record positive condition evaluations but also false
// evaluations.  True evals will contribute to an alert firing. And for default dampening (1 consecutive condition set
// match) it is enough to fire the trigger.  But negative evals also contribute to dampening, resetting strict
// dampening, and potentially resetting relaxed dampening.  So, each defined Condition will be evaluated when its
// relevant Data facts are present in working memory , generating a ConditionEval fact which will then be applied
// to the relevant Dampening fact.
//
// Data facts will be applied to all relevant Condition evals, and then will be retracted (using rule complexity
// to fire the retract rule after the condition evals).
//
// It is a precondition that all Triggers in working memory are enabled (i.e. enabled == true ).

// ConditionEval rules

rule Threshold
    when 
        $t : Trigger( $tid : id, $tmode : mode )
        $c : ThresholdCondition ( triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : NumericData( $did == id )
    then
        ThresholdConditionEval ce = new ThresholdConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("Threshold Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule ThresholdRange
    when 
        $t : Trigger( $tid : id, $tmode : mode )
        $c : ThresholdRangeCondition ( triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : NumericData( $did == id )
    then
        ThresholdRangeConditionEval ce = new ThresholdRangeConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("ThresholdRange Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

// Note that at the moment a CompareCondition will only ever match if the NumericData facts are inserted
// at the same time. If only one Data is present in WM it will not match this rule and will get retracted
// as unused/unnecessary.  We may have to revisit this behavior and nail down the desired semantics of this
// kind of condition. But this may be correct behavior as is.  It makes sense to me that this sort of condition
// should likely be used on data reported in the same batch. But if not, one approach may be to insert a special
// fact type, here, like CompareData (in addition to inserting as NumericData, for other condition evals) and then
// handle that retraction differently, always holding onto the most recent data for the dataId, as needed for comparing
// data when it arrives at different times.
rule Compare
    when 
        $t  : Trigger( $tid : id, $tmode : mode )
        $c  : CompareCondition ( triggerId == $tid, triggerMode == $tmode, $d1id : data1Id, $d2id : data2Id )
        $d1 : NumericData( $d1id == id )
        $d2 : NumericData( $d2id == id )
    then
        CompareConditionEval ce = new CompareConditionEval($c, $d1, $d2);
        if (log != null && log.isDebugEnabled()) {
            log.debug("Compare Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule Availability
    when 
        $t : Trigger( $tid : id, $tmode : mode )
        $c : AvailabilityCondition ( triggerId == $tid, triggerMode == $tmode, $did : dataId )
        $d : Availability( $did == id )
    then
        AvailabilityConditionEval ce = new AvailabilityConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("Availability Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

rule String
    when 
        $t : Trigger( $tid : id, $tmode : mode )
        $c : StringCondition ( triggerId == $tid, triggerMode == $tmode, $did : dataId  )
        $d : StringData( $did == id )
    then
        StringConditionEval ce = new StringConditionEval($c, $d);
        if (log != null && log.isDebugEnabled()) {
            log.debug("String Eval: " + (ce.isMatch() ? "  Match! " : "no match ")  + ce.getLog());
        }
        insert( ce );
end

// Data retraction rules
// These rules are expected to fire after any Eval rules, due to their simplicity.  Note that Data is not retracted
// in the (above) rules, that generate ConditionEval facts, because one Datum can generate multiple evals, for different
// Triggers.

rule RetractProcessedNumericData
    when
        $d : NumericData()
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug( "Retracting " + $d + "..." );
        }
        retract ( $d );
end

rule RetractProcessedStringData
    when
        $d : StringData()
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug( "Retracting " + $d + "..." );
        }
        retract ( $d );
end

rule RetractProcessedAvailabilityData
    when
        $d : Availability()
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug( "Retracting " + $d + "..." );
        }
        retract ( $d );
end


////// DAMPENING
//
// Dampening defines for each trigger how the number of positive, negative, and total evaluations determine
// whether a trigger fires.  Additionally, there may be a constraint on the period of time involved in the
// evaluations.
//
// Dampening is optionally defined for a Trigger.  If not defined then default dampening will be applied for uniformity
// of processing.  Default dampening is basically handled as STRICT( 1 ).  Meaning 1 positive, consecutive evaluation
// is required for the trigger to fire.  In other words, if the conditions match, the trigger fires.
//
// So, there is one Dampening fact for each Trigger fact.  And it is continually updated given each relevant condition
// set evaluation for the trigger.
//
// Note that there are N rules required to cover triggers with varying numbers of conditions, from 1..N, with N being
// the maximum number of supported conditions.  Current MAX_CONDITIONS = 4.  This applies to ALL-match triggers,
// ANY-match triggers can have any number of conditions.

// ConditionEval retraction rules
// Understanding multi-condition Trigger evaluation is important.  ConditionEvals are generated when the relevant Data
// appears in working memory.  Because Data for specific Ids can appear at different rates, there can be several
// ConditionEvals for DataId X than for DataId Y, or even before we have a single eval for DataId Y.  Our approach is
// chosen for two reasons: simplicity of understanding, and the general desire for recency in alerting.  For 
// *multi-condition* Trigger evaluations we test only tuples containing the most recent evaluation of each condition.
// For example, consider a Trigger T with two conditions, (X > 100) and (Y > 200).  Now assume Data arrives like this:
// (t1, X=125), (t2, X=50), (t3, Y=300), (t4, X=110), (t5, Y=150). The t1 evaluation of X=125 will be superseded by the
// t2 evaluation of X=50. When Y is finally reported at t3, the tuple tested for T is (X=50, Y=300), which will not
// fire an Alert because the X condition (50 > 100 ) evaluates to false.  At t4 we the tuple (X=110, Y=300) will
// evaluate to true, firing T.  And at t5 the evaluation of Y=300 will be superseded by Y=150, the tuple (X=110, Y=150)
// will evaluate to false and T will not fire.
//
// Given the above approach to matching, we must hold onto the most recent evaluation of each condition used in
// a multi-condition Trigger.  For a single-condition Trigger we can  immediately retract the ConditionEval after
// Dampening is updated.  Note that "ANY"-match multi-condition Triggers are equivalent to a single-condition Trigger
// with respect to retraction, but all others must be retracted only when replaced by a more recent eval.  Additionally,
// we must prevent updating dampening on the same Tuple multiple times.  To do that we do two things:
//   - mark the ConditionEvals used in a tested Tuple as "used".
//   - require at least one unused ConditionEval in a tested Tuple.
// Note that because Dampening can be updated outside of the rule performing the dampening update, using "no-loop true"
// is not sufficient.  For example, Dampening is reset when an Trigger is fired.
//
// The retraction rule executes at a higher-than-default salience (priority) to ensure that only the most recent
// ConditionEval is applied to Dampening updates.
//
// Note that despite being retracted as a fact, the XxxEval pojos are maintained in the Dampening pojo as auditing
// information for any firing of the Trigger.

rule RetractObsoleteConditionEval
    salience 10
    when
        $ce1 : ConditionEval( $tid : triggerId, ( conditionSetSize > 1 ), $csi : conditionSetIndex, $t1 : evalTimestamp )
        $ce2 : ConditionEval( $tid == triggerId, $csi == conditionSetIndex, $t1 > evalTimestamp )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug( "Retracting obsolete multi-condition eval " + $ce2 + " (due to " + $ce1 + ")");
        }
        retract( $ce2 );
end


// Dampening update rules
// Note that single-condition Triggers can retract the ConditionEval immediately because it is not needed to
// form a future Tuple.  ANY-match Triggers are treated as single-condition because only the single-condition must
// evaluate to true.
// For multi-condition Triggers the ConditionEvals can not be retracted and instead must be set to "used". Those
// ConditionEvals are instead retracted by "RetractObsoleteConditionEval" when a newer Eval comes into WM.

rule ProvideDefaultDampening
    when
        $t : Trigger( $tid : id, $tmode : mode )
        not Dampening( triggerId == $tid, triggerMode == $tmode )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("Adding default " + $tmode + " dampening for trigger! " + $t.getId());
        }
        Dampening d = new Dampening( $tid, $tmode, Dampening.Type.STRICT, 1, 1, 0L );
        insert( d );
end

rule DampenTriggerAny
    when
        $t  : Trigger( match == Match.ANY, $tid : id, $tmode : mode )
        $d  : Dampening( triggerId == $tid, triggerMode == $tmode, satisfied == false )
        $ce : ConditionEval ( triggerId == $tid )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug( "Updating dampening (ANY) for: " + $ce );
        }
        $d.perform( $ce );
        update( $d );
        if (log != null && log.isDebugEnabled()) {
            log.debug("Retracting multi-condition ANY trigger eval: " + $ce);
        }
        retract ( $ce );
end

rule DampenOneConditionTrigger
    when
        $t  : Trigger( match == Match.ALL, $tid : id, $tmode : mode )
        $d  : Dampening( triggerId == $tid, triggerMode == $tmode, satisfied == false ) 
        $ce : ConditionEval ( triggerId == $tid, conditionSetSize == 1, conditionSetIndex == 1 )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("Updating dampening for: " + $ce);
        }
        $d.perform( $ce );
        update( $d );
        if (log != null && log.isDebugEnabled()) {
            log.debug("Retracting single-condition trigger eval: " + $ce);
        }
        retract ( $ce );
end

rule DampenTwoConditionTrigger
    when
        $t   : Trigger( match == Match.ALL, $tid : id, $tmode : mode )
        $d   : Dampening( triggerId == $tid, triggerMode == $tmode, satisfied == false )
        $ce1 : ConditionEval ( triggerId == $tid, conditionSetSize == 2, conditionSetIndex == 1 )
        $ce2 : ConditionEval ( triggerId == $tid, conditionSetSize == 2, conditionSetIndex == 2 )
        exists ConditionEval ( triggerId == $tid, used == false )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("Updating dampening for: " + $ce1 + $ce2);
        }
        $d.perform( $ce1, $ce2 );
        update( $d );
        for( ConditionEval ce : new ConditionEval[] { $ce1, $ce2 } ) {
            if ( ! ce.isUsed() ) {
                ce.setUsed( true );
                update( ce );
            }
        }
end

rule DampenThreeConditionTrigger
    when
        $t   : Trigger( match == Match.ALL, $tid : id, $tmode : mode )
        $d   : Dampening( triggerId == $tid, triggerMode == $tmode, satisfied == false )
        $ce1 : ConditionEval ( triggerId == $tid, conditionSetSize == 3, conditionSetIndex == 1 )
        $ce2 : ConditionEval ( triggerId == $tid, conditionSetSize == 3, conditionSetIndex == 2 )
        $ce3 : ConditionEval ( triggerId == $tid, conditionSetSize == 3, conditionSetIndex == 3 )
        exists ConditionEval ( triggerId == $tid, used == false )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("Updating dampening for: " + $ce1 + $ce2 + $ce3);
        }
        $d.perform( $ce1, $ce2, $ce3 );
        update( $d );
        for( ConditionEval ce : new ConditionEval[] { $ce1, $ce2, $ce3 } ) {
            if ( ! ce.isUsed() ) {
                ce.setUsed( true );
                update( ce );
            }
        }
end

rule DampenFourConditionTrigger
    when
        $t   : Trigger( match == Match.ALL, $tid : id, $tmode : mode )
        $d   : Dampening( triggerId == $tid, triggerMode == $tmode, satisfied == false )
        $ce1 : ConditionEval ( triggerId == $tid, conditionSetSize == 4, conditionSetIndex == 1 )
        $ce2 : ConditionEval ( triggerId == $tid, conditionSetSize == 4, conditionSetIndex == 2 )
        $ce3 : ConditionEval ( triggerId == $tid, conditionSetSize == 4, conditionSetIndex == 3 )
        $ce4 : ConditionEval ( triggerId == $tid, conditionSetSize == 4, conditionSetIndex == 4 )
        exists ConditionEval ( triggerId == $tid, used == false )
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("Updating dampening for: " + $ce1 + $ce2 + $ce3 + $ce4);
        }
        $d.perform( $ce1, $ce2, $ce3, $ce4 );
        update( $d );
        for( ConditionEval ce : new ConditionEval[] { $ce1, $ce2, $ce3, $ce4 } ) {
            if ( ! ce.isUsed() ) {
                ce.setUsed( true );
                update( ce );
            }
        }
end



////// ALERT GENERATION / TRIGGER MODE HANDLING

// If a Trigger's FIRE mode Dampening is satisfied, then the Trigger fires and generates an Alert.  The Trigger's
// FIRE mode Dampening fact is then reset and updated in working memory, ready to again track evals for the Trigger.
// If the Trigger has safety mode enabled then we toggle the Trigger to SAFETY mode and it can not fire again
// until the safety mode Dampening is satisfied and the Trigger returns to FIRE mode.
rule AlertOnSatisfiedDampening
    when
        $t  : Trigger( mode == Mode.FIRE, $tid : id )
        $d  : Dampening( triggerMode == Mode.FIRE, triggerId == $tid, satisfied == true ) 
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("AlertOnSatisfiedDampening! " + $d.log());
        }

        Alert newAlert = new Alert( $tid, $d.getSatisfyingEvals() );
        alerts.add(newAlert);
        if (notifications != null) {
            for (String notifierId : $t.getNotifiers()) {
                Notification notification = new Notification();
                notification.setNotifierId(notifierId);
                notification.setMessage(newAlert.toString());
                notifications.send(notification);
            }
        }

        //insert(  newAlert );

        $d.reset();
        update( $d )

        if ($t.isSafetyEnabled()) {
            if (log != null && log.isDebugEnabled()) {
                log.debug("Setting Trigger to Safety Mode! " + $t);
            }
            $t.setMode(Mode.SAFETY);
            update( $t )

        } else if (log != null && log.isDebugEnabled()) {
            log.debug("Trigger remains in Fire mode, Safety Mode not enabled. " + $t);
        }
end


rule SetFiringModeOnSatisfiedDampening
    when
        $t  : Trigger( mode == Mode.SAFETY, $tid : id )
        $d  : Dampening( triggerMode == Mode.SAFETY, triggerId == $tid, satisfied == true ) 
    then
        if (log != null && log.isDebugEnabled()) {
            log.debug("SetFiringModeOnSatisfiedDampening! " + $d.log());
        }

        $d.reset();
        update( $d )

        $t.setMode(Mode.FIRE);
        update( $t )
end
